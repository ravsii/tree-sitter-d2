====================|||
Basics (No Args, No Returns)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(): ()
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)))))

====================|||
Basics (No Args, Single Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(): (x int)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (returns
        (argument_name)
        (argument_type))))))

====================|||
Basics (Single Arg, no return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type))))))

====================|||
Basics (Single Arg, Single Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64): (b int)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args, Single Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64, b int64): (b int)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args, Multiple Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64, b int64): (c int, d []string)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args & Returns, short ver.)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a, b int64): (c, d []string)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args, Returns & Types, short ver.)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a, b int64, c, d []string): (e, f int, g, h []float64)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_name)
        (argument_type))))))

