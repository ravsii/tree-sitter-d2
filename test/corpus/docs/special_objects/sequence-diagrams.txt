====================|||
Basics
====================|||

shape: sequence_diagram
alice -> bob: What does it mean\nto be well-adjusted?
bob -> alice: The ability to play bridge or\ngolf as if they were games.

---|||

(source_file
  (declaration
    (identifier)
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)))

====================|||
Scoping Example
====================|||

Office chatter: {
  shape: sequence_diagram
  alice: Alice
  bob: Bobby
  awkward small talk: {
    alice -> bob: uhm, hi
    bob -> alice: oh, hello
    icebreaker attempt: {
      alice -> bob: what did you have for lunch?
    }
    unfortunate outcome: {
      bob -> alice: that's personal
    }
  }
}

---|||

(source_file
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (block
          (declaration
            (identifier)
            (connection)
            (identifier)
            (label))
          (declaration
            (identifier)
            (connection)
            (identifier)
            (label))
          (declaration
            (identifier)
            (block
              (declaration
                (identifier)
                (connection)
                (identifier)
                (label))))
          (declaration
            (identifier)
            (block
              (declaration
                (identifier)
                (connection)
                (identifier)
                (label)))))))))

====================|||
Ordering
====================|||

shape: sequence_diagram
# Remember that semicolons allow multiple objects to be defined in one line
# Actors will appear from left-to-right as a, b, c, d...
a; b; c; d
# ... even if the connections are in a different order
c -> d
d -> a
b -> d

---|||

(source_file
  (declaration
    (identifier)
    (label))
  (comment)
  (comment)
  (declaration
    (identifier))
  (declaration
    (identifier))
  (declaration
    (identifier))
  (declaration
    (identifier))
  (comment)
  (declaration
    (identifier)
    (connection)
    (identifier))
  (declaration
    (identifier)
    (connection)
    (identifier))
  (declaration
    (identifier)
    (connection)
    (identifier)))

====================|||
Spans
====================|||

shape: sequence_diagram
alice.t1 -> bob
alice.t2 -> bob.a
alice.t2.a -> bob.a
alice.t2.a <- bob.a
alice.t2 <- bob.a

---|||

(source_file
  (declaration
    (identifier)
    (label))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier)))
  (declaration
    (identifier
      (identifier)
      (identifier))
    (connection)
    (identifier
      (identifier)))
  (declaration
    (identifier
      (identifier)
      (identifier))
    (connection)
    (identifier
      (identifier)))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))))

====================|||
Groups
====================|||

shape: sequence_diagram
# Predefine actors
alice
bob
shower thoughts: {
  alice -> bob: A physicist is an atom's way of knowing about atoms.
  alice -> bob: Today is the first day of the rest of your life.
}
life advice: {
  bob -> alice: If all else fails, lower your standards.
}

---|||

(source_file
  (declaration
    (identifier)
    (label))
  (comment)
  (declaration
    (identifier))
  (declaration
    (identifier))
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (connection)
        (identifier)
        (label))
      (declaration
        (identifier)
        (connection)
        (identifier)
        (label))))
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (connection)
        (identifier)
        (label)))))

====================|||
Notes
====================|||

shape: sequence_diagram
alice -> bob
bob."In the eyes of my dog, I'm a man."
# Notes can go into groups, too
important insight: {
  bob."Cold hands, no gloves."
}
bob -> alice: Chocolate chip.

---|||

(source_file
  (declaration
    (identifier)
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier))
  (declaration
    (identifier
      (identifier)))
  (comment)
  (declaration
    (identifier)
    (block
      (declaration
        (identifier
          (identifier)))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)))

====================|||
Self-messages
====================|||

bob -> alice: Chocolate chip.
shape: sequence_diagram
son -> father: Can I borrow your car?
friend -> father: Never lend your car to anyone to whom you have given birth.
father -> father: internal debate ensues

---|||

(source_file
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label))
  (declaration
    (identifier)
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)))

====================|||
Customization
====================|||

shape: sequence_diagram
scorer: {shape: person}
scorer.t -> itemResponse.t: getItem()
scorer.t <- itemResponse.t: item {
  style.stroke-dash: 5
}

scorer.t -> item.t1: getRubric()
scorer.t <- item.t1: rubric {
  style.stroke-dash: 5
}

scorer.t -> essayRubric.t: applyTo(essayResp)
itemResponse -> essayRubric.t.c
essayRubric.t.c -> concept.t: match(essayResponse)
scorer <- essayRubric.t: score {
  style.stroke-dash: 5
}

scorer.t -> itemOutcome.t1: new
scorer.t -> item.t2: getNormalMinimum()
scorer.t -> item.t3: getNormalMaximum()

scorer.t -> itemOutcome.t2: setScore(score)
scorer.t -> itemOutcome.t3: setFeedback(missingConcepts)

---|||

(source_file
  (declaration
    (identifier)
    (label))
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label)
    (block
      (declaration
        (identifier
          (identifier))
        (label
          (integer)))))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label)
    (block
      (declaration
        (identifier
          (identifier))
        (label
          (integer)))))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier
      (identifier)
      (identifier)))
  (declaration
    (identifier
      (identifier)
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier)
    (connection)
    (identifier
      (identifier))
    (label)
    (block
      (declaration
        (identifier
          (identifier))
        (label
          (integer)))))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label))
  (declaration
    (identifier
      (identifier))
    (connection)
    (identifier
      (identifier))
    (label)))
