====================|||
Basics (No Args, Empty Returns)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method()
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)))))

====================|||
Basics (No Args, No Returns)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(): ()
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)))))

====================|||
Basics (No Args, Single Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(): (x int)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)
      (returns
        (argument_name)
        (argument_type))))))

====================|||
Basics (Single Arg, no return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type))))))

====================|||
Basics (Single Arg, Single Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64): (b int)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args, Single Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64, b int64): (b int)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args, Multiple Return)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a uint64, b int64): (c int, d []string)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args & Returns, short ver.)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a, b int64): (c, d []string)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_name)
        (argument_type))))))

====================|||
Basics (Multiple Args, Returns & Types, short ver.)
====================|||

MyClass: {
  shape: class

  field: "[]string"
  method(a, b int64, c, d []string): (e, f int, g, h []float64)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
    (declaration
      (identifier)
      (label))
    (declaration
      (identifier)
      (label))
    (method_declaration
      (identifier)
      (arguments
        (argument_name)
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_name)
        (argument_type))
      (returns
        (argument_name)
        (argument_name)
        (argument_type)
        (argument_name)
        (argument_name)
        (argument_type))))))


====================|||
Visibility Marks (field)
====================|||

D2 Parser: {
  shape: class
  +reader: io.RuneReader
}

---|||

(source_file
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label)))))

====================|||
Visibility Marks (method)
====================|||

D2 Parser: {
  shape: class
  +Read(buf []byte)
}

---|||

(source_file
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))
      (method_declaration
        (identifier)
        (arguments
          (argument_name)
          (argument_type))))))


====================|||
Example
====================|||

D2 Parser: {
  shape: class

  # Default visibility is + so no need to specify.
  +reader: io.RuneReader
  readerPos: d2ast.Position

  # Private field.
  -lookahead: "[]rune"

  # Protected field.
  # We have to escape the # to prevent the line from being parsed as a comment.
  \#lookaheadPos: d2ast.Position

  +peek(): (r rune, eof bool)
  rewind()
  commit()

  \#peekn(n int): (s string, eof bool)
}

"github.com/terrastruct/d2parser.git" -> D2 Parser

---|||

(source_file
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))
      (comment)
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))
      (comment)
      (declaration
        (identifier)
        (label))
      (comment)
      (comment)
      (declaration
        (identifier)
        (label))
      (method_declaration
        (identifier)
        (returns
          (argument_name)
          (argument_type)
          (argument_name)
          (argument_type)))
      (method_declaration
        (identifier))
      (method_declaration
        (identifier))
      (method_declaration
        (identifier)
        (arguments
          (argument_name)
          (argument_type))
        (returns
          (argument_name)
          (argument_type)
          (argument_name)
          (argument_type)))))
  (declaration
    (identifier)
    (connection)
    (identifier)))

====================|||
Full Example
====================|||

DebitCard: Debit card {
  shape: class
  +cardno
  +ownedBy

  +access()
}

Bank: {
  shape: class
  +code
  +address

  +manages()
  +maintains()
}

ATMInfo: ATM info {
  shape: class
  +location
  +manageBy

  +identifies()
  +transactions()
}

Customer: {
  shape: class
  +name
  +address
  +dob

  +owns()
}

Account: {
  shape: class
  +type
  +owner
}

ATMTransaction: ATM Transaction {
  shape: class
  +transactionId
  +date
  +type

  +modifies()
}

CurrentAccount: Current account {
  shape: class
  +accountNo
  +balance

  +debit()
  +credit()
}

SavingAccount: Saving account {
  shape: class
  +accountNo
  +balance

  +debit()
  +credit()
}

WidthdrawlTransaction: Withdrawl transaction {
  shape: class
  +amount

  +Withdrawl()
}

QueryTransaction: Query transaction {
  shape: class
  +query
  +type

  +queryProcessing()
}

TransferTransaction: Transfer transaction {
  shape: class
  +account
  +accountNo
}

PinValidation: Pin validation transaction {
  shape: class
  +oldPin
  +newPin

  +pinChange()
}

DebitCard -- Bank: manages {
  source-arrowhead: 1..*
  target-arrowhead: 1
}

Bank -- ATMInfo: maintains {
  source-arrowhead: 1
  target-arrowhead: 1
}

Bank -- Customer: +has {
  source-arrowhead: 1
  target-arrowhead: 1
}

DebitCard -- Customer: +owns {
  source-arrowhead: 0..*
  target-arrowhead: 1..*
}

DebitCard -- Account: +provides access to {
  source-arrowhead: *
  target-arrowhead: 1..*
}

Customer -- Account: owns {
  source-arrowhead: 1..*
  target-arrowhead: 1..*
}

ATMInfo -- ATMTransaction: +identifies {
  source-arrowhead: 1
  target-arrowhead: *
}

ATMTransaction -> Account: modifies {
  source-arrowhead: *
  target-arrowhead: 1
}

CurrentAccount -> Account: {
  target-arrowhead.shape: triangle
  target-arrowhead.style.filled: false
}

SavingAccount -> Account: {
  target-arrowhead.shape: triangle
  target-arrowhead.style.filled: false
}

WidthdrawlTransaction -> ATMTransaction: {
  target-arrowhead.shape: triangle
  target-arrowhead.style.filled: false
}
QueryTransaction -> ATMTransaction: {
  target-arrowhead.shape: triangle
  target-arrowhead.style.filled: false
}
TransferTransaction -> ATMTransaction: {
  target-arrowhead.shape: triangle
  target-arrowhead.style.filled: false
}
PinValidation -> ATMTransaction: {
  target-arrowhead.shape: triangle
  target-arrowhead.style.filled: false
}

---|||

(source_file
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))))
  (declaration
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier))
      (declaration
        (identifier))
      (method_declaration
        (identifier))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (label)
    (block
      (declaration
        (identifier)
        (label))
      (declaration
        (identifier)
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (block
      (declaration
        (identifier
          field: (identifier))
        (label))
      (declaration
        (identifier
          field: (identifier)
          field: (identifier))
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (block
      (declaration
        (identifier
          field: (identifier))
        (label))
      (declaration
        (identifier
          field: (identifier)
          field: (identifier))
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (block
      (declaration
        (identifier
          field: (identifier))
        (label))
      (declaration
        (identifier
          field: (identifier)
          field: (identifier))
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (block
      (declaration
        (identifier
          field: (identifier))
        (label))
      (declaration
        (identifier
          field: (identifier)
          field: (identifier))
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (block
      (declaration
        (identifier
          field: (identifier))
        (label))
      (declaration
        (identifier
          field: (identifier)
          field: (identifier))
        (label))))
  (declaration
    (identifier)
    (connection)
    (identifier)
    (block
      (declaration
        (identifier
          field: (identifier))
        (label))
      (declaration
        (identifier
          field: (identifier)
          field: (identifier))
        (label)))))
